{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Terraform Modules","text":"<p>These terraform modules are meant to serve as a package of reusable solutions for common infrastructure  patterns that will be used at propulsion consulting. The modules allow for hybrid deployments (on premises &amp; AWS). </p>"},{"location":"#modules-overview","title":"\ud83e\udde9 Modules Overview","text":""},{"location":"#aws-modules","title":"\u2601\ufe0f AWS Modules","text":"Module Description <code>networking</code> Sets up VPCs, subnets, gateways, and security groups <code>container-app</code> Deploys containerized applications on AWS <code>ecr-repository</code> Manages AWS ECR for container images <code>postgres-deployment</code> Provisions PostgreSQL instances on AWS"},{"location":"#on-prem-modules","title":"\ud83d\udda5\ufe0f On-Prem Modules","text":"Module Description <code>application-on-prem</code> On-premise application service deployment <code>clickhouse-on-prem</code> ClickHouse data warehouse setup on-prem <code>container-app-on-prem</code> Local containerized application setup <code>container-registry-on-prem</code> Local container registry configuration <code>postgres-appdb-on-prem</code> Application PostgreSQL database for on-prem environments <code>postgres-deployment-on-prem</code> Core PostgreSQL infrastructure deployment for on-prem setups"},{"location":"#additional-notes","title":"Additional Notes","text":"<ul> <li>Refer to the page tree index to see what each module does and how it contributed to the application development lifecycle</li> <li>Each module has high level architecture along with the implementation details and how it's used during application/data deployments.</li> </ul>"},{"location":"application-service-module/","title":"Application Service Module","text":"<ul> <li>General module for deploying infrastructure for new \"full stack\" applications. </li> <li>Deployment for infrastructure is separated between home development server and AWS cloud infrastructure. Github actions will deploy to both environments. </li> <li>Base infrastructure requires a postgres deployment, a public registry to push docker containers to, and network setup on the AWS side.</li> </ul>"},{"location":"application-service-module/#on-premises","title":"On Premises","text":"Component Description Docker Registry Local docker registry hosted on server, all application docker images are pushed to this registry and pulled down during app deployment Postgres Deployment A postgres database cluster needs to exist in order for applications to create databases on it. Deployment is mimimal with no networking setup and regular username and password authentication for now. API Source Code Container All application source code is docker containerized and depends on the local registry existing so that the application source code can be pushed to it."},{"location":"application-service-module/#container-service-orchestration","title":"Container Service Orchestration","text":"<ul> <li>ECS Cluster: ECS cluster hosts all container app services, ECS task execution role is attached to cluster to allow tasks to be executed for each container</li> <li>App Service: App service is deployed within the ECS cluster, pulls container from ECR, then creates a ECS service with a task definition, task definition hosts on port 80/443 for web traffic. Logging is enabled which will log to a corresponding cloudwatch group for monitoring.</li> </ul>"},{"location":"application-service-module/#application-service-architecture","title":"Application Service Architecture","text":"<ul> <li>Infrastructure for managing deployments on the on premises server (ubuntu home server) will be version controlled in GitHub with terraform templates/modules</li> <li>Terraform modules will manage docker containers and the application database (postgreSQL). Pushing API source code to the docker container might also be managed by terraform</li> <li>The application database migrations will be done using Flyway to keep track of all schema changes/database management.</li> </ul>"},{"location":"application-service-module/#on-premise-container-registry","title":"On Premise Container Registry","text":"<ul> <li>Hosting a container registry on home server for development and staging of applications before going to production AWS account</li> <li>Container registry will have 2 volumes, primary and second volumes for backup recovery and application migrations. </li> <li>Registry will have a namespace organization mechanism, <code>api</code> for rest API's, <code>site</code> for front end application source code, <code>model</code> for machine learning models</li> </ul>"},{"location":"application-service-module/#cloud-application-service","title":"Cloud Application Service","text":"<ul> <li>Infrastructure for managing deployments to AWS account will be version controlled in GitHub with terraform templates/modules, authorized to deploy to AWS using open ID connect role. </li> <li>Terraform will manage an AWS stack that contains docker containers on ECS and postgreSQL databases using RDS. Each application will contain this stack of resources. </li> <li>The application database migrations will be done using Flyway to keep track of all schema changes/database management.</li> </ul>"},{"location":"application-service-module/#features","title":"Features","text":"Feature Alias Description Application database module Module for creating postgres database infrastructure and local docker container for development. REST service module Module for deploying REST API's. Includes container deployment for API source code with AWS and home server. Client side module Module for hosting infrastructure needed for front end web applications. Includes deployment to S3 for cloud storage and home server docker container."},{"location":"data-warehouse-module/","title":"Data Warehouse Module","text":"<ul> <li>Reusable module for deploying infrastructure needed for data warehousing. Includes boundaries for storage and compute are separated between AWS and local server.</li> <li>Databases will come with predefined functionality for storing users and viewing information related to users. </li> <li>On premises deployment is connected to local ubuntu home server. Home server is used as development environment for pipelines. </li> <li>Cloud deployment uses EC2 for managing compute, storage is hosted on AWS S3 blob storage. </li> </ul>"},{"location":"data-warehouse-module/#on-premises-data-warehouse-deployment","title":"On Premises Data Warehouse Deployment","text":""},{"location":"data-warehouse-module/#components","title":"Components","text":"Feature Alias Description Version Controlled IAC Changes to infrastructure are managed in CI/CD, for the on premises version,  a github actions runner it setup on the home server to deploy remotely. Containerization Making use of the provided clickhouse container for deploying instances on local home server. Clickhouse clusters are allocated based on what resources we provide to the container memory and cpu usage wise. Database Management A separate repository is used to manage all the clickhouse database administration, and individual database management using flyway (redgate)"},{"location":"data-warehouse-module/#cloud-data-warehouse-deployment","title":"Cloud Data Warehouse Deployment","text":""},{"location":"data-warehouse-module/#components_1","title":"Components","text":"Feature Alias Description Version Controlled IAC Changes to infrastructure are managed in CI/CD using terraform to manage the docker containers &amp; GitHub repository to host any SQL  or admin database management scripts. Containerization Resources for hosting click house clusters are containerized with docker. Uses click house server container with a docker volume for storage or S3 for cloud storage. Database Management Click house databases are managed using flyway with admin scripts for managing users, roles and databases."},{"location":"networking-module/","title":"Networking Setup","text":"<ul> <li>For deploying on AWS, a VPC (virtual private cloud) configuration is required for us to host networked services that will be accessed over the internet publicly. </li> <li>For our modules, specifically we need networking access for postgres (RDS) and for web traffic to ECS containers hosting web applications or API's</li> <li>Down below is the current architecture for what the networking module does within these terraform modules. This is part of the base configuration that needs to be deployed before creating any apps or services.</li> </ul>"},{"location":"networking-module/#design","title":"Design","text":"<ul> <li>VPC: vpc contains configuration for CIDR ranges along with public subnets, availability zones are in <code>us-east-2</code>, 3 configured for current setup. DNS host names and support are enabled by default.</li> <li>Postgres Security Group: Security group configured for allowing connections to postgres with designated port. </li> <li>ECS Task Security Group: Security group for allowing web traffic through ECS for HTTP and HTTPS traffic. </li> </ul>"},{"location":"rest-api-service-pattern/","title":"REST API Pattern","text":"<ul> <li>Consistent pattern for building REST web protocol API's using golang &amp; docker containers to deploy and host.</li> <li>Integrates with PostgreSQL application database and Clickhouse data warehouse, data stores can be managed using flyway with CI/CD</li> <li>Builds docker container with API source for handlers and pushes to local registry. Application deployment pulls down image and hosts API with specified ports.</li> <li>Includes user authentication service for managing access for specific API handler routes. </li> <li>Development environment deploys all to local device, staging deploys to local Ubuntu home server, Production is the AWS account using terraform to manage infrastructure.</li> </ul>"},{"location":"rest-api-service-pattern/#features","title":"Features","text":"Alias Description User Management Service User authentication service for managing access for specific API handler routes. Uses JWT to provide auth for users Database Management Manage clickhouse &amp; postgres database at the same time with flyway in CI/CD CRUD Operations Provided set of operations with sample postgres table entity with CRUD operations &amp; additional bulk operations Docker Deployment Docker boilerplate for pushing to image registry and host application with ports exposed."},{"location":"rest-api-service-pattern/#crud-operations","title":"CRUD Operations","text":"<ul> <li>List of database operations that will be supported by the API pattern. Includes sample entity that operations will be done on.</li> <li>Sample entity represents an account that stores funds, this will be used to test all database operations with unit/integration tests</li> </ul>"},{"location":"rest-api-service-pattern/#sample-entity-account","title":"Sample Entity (Account)","text":"Field Name Type Description <code>ID</code> <code>INTEGER</code> Unique ID associated with account entity <code>USER_ID</code> <code>INTEGER</code> User ID associated with account <code>NAME</code> <code>VARCHAR</code> Text field to associate name to account <code>MAX_SELL</code> <code>FLOAT</code> Maximum price to sell shares <code>MIN_BUY</code> <code>FLOAT</code> Mininumum price to start buying <code>BALANCE</code> <code>FLOAT</code> Current balance of account <code>CREATED_AT</code> <code>DATE</code> Date account was created <code>UPDATED_AT</code> <code>DATE</code> Date account information was updated <code>ACTIVE</code> <code>BOOLEAN</code> Soft delete field"},{"location":"rest-api-service-pattern/#operations","title":"Operations","text":"Operation Name HTTP Protocol Description Create <code>POST</code> Create a single instance of the entity Bulk Create <code>POST</code> Provide bulk field entries and create multiple entities in one call Read <code>GET</code> View all entity records Read Detail <code>GET</code> View specific entity record  by unique identifier Update <code>PATCH</code> Update single entity instance Bulk Update <code>PATCH</code> Provide bulk field entries and update multiple entities Delete Detail <code>DELETE</code> Delete specific entity record  by unique identifier Bulk Delete <code>DELETE</code> Provide bulk field entries and delete multiple entities"},{"location":"rest-api-service-pattern/#docker-deployment","title":"Docker Deployment","text":"Operation Description Push image Pushes container to local registry, local for dev, to ubuntu home server for staging, AWS cloud for production deployment. List Image Can list images that are pushed to the repository with this url: <code>http://localhost:5000/v2/_catalog</code> Delete Image Delete specific image by filtering application name"},{"location":"user-authentication-service/","title":"User Authentication Service","text":"<ul> <li>Service for authenticating users on specific handlers/routes for API's</li> <li>Includes 2 factor authentication with E-mail and SMS (Phone numbers), we're not going to do this for on-prem, will do it when AWS stack is deployed and can use SES or SMS services</li> </ul>"},{"location":"user-authentication-service/#user-model","title":"User Model","text":"Field Type Description <code>ID</code> <code>INTEGER</code> Unique identifier associated with user model <code>USERNAME</code> <code>VARCHAR</code> Username of the user account <code>EMAIL</code> <code>VARCHAR</code> E-mail address associated with user <code>PHONE_NUMBER</code> <code>VARCHAR</code> Phone number associated with account <code>2FA</code> <code>BOOLEAN</code> Boolean to indicate if one of the 2 factor authentication methods is set up. <code>PASSWORD</code> <code>VARCHAR</code> Hashed password associated with account <code>CREATED_AT</code> <code>DATE</code> Date the user was created/registered <code>UPDATED_AT</code> <code>DATE</code> Date the user entry record was updated/modified <code>LAST_LOGIN</code> <code>DATE</code> Date of last time user logged in ## Routes <ul> <li>Main routes the user management service will expose for general authentication &amp; registration and 2 factor validation.</li> </ul> Route Path Description Register <code>/users/register</code> Create a new user &amp; register with required user model fields Bulk Register <code>/users/bulk</code> Bulk register an array of user objects Login <code>/users/login</code> Provide <code>username</code> and <code>password</code>, retrieve back API token for authenticating with other routes. 2FA <code>/2fa</code> Validate account login with 2 factor authentication method, provide one time pass-code  from E-mail or text message. Password Reset <code>/password-reset</code> Reset password, will be sent E-mail associated with account. Delete User <code>/users/:id</code> Delete a specific user on the service, 2 factor authentication required for deleting account Bulk Delete <code>/users/bulk</code> Bulk delete users with id's provided Update User <code>/users/:id</code> Update a specific user and modify the existing fields, changing E-mail or Phone number will prompt for a one time pass code. Bulk Update User <code>/users/bulk</code> Update an array of users, pass user ids of each object"},{"location":"user-authentication-service/#two-factor-authentication","title":"Two Factor Authentication","text":"<ul> <li>User will register on the site with their information, provide the fields required for the user model entry, store the entry in the database.</li> <li>Once user is successfully created, the user then has the option to secure the account more with 2 factor auth methods such as E-mail or text message. </li> <li>If the 2 factor authentication method is set to true for the user profile, they will be re-directed to a 2FA screen to validate a code after logging in. </li> <li>2 factor authentication login sessions store the codes temporarily in the database for up to 15 minutes.  The table in the database indicates if the code is active and  user associated. </li> <li>Date retention policy set up on one time pass code table entries. On a certain time intervals, inactive pass codes get deleted from the database. </li> </ul>"},{"location":"user-authentication-service/#table-storing-one-time-pass-codes","title":"Table Storing One Time Pass Codes","text":"<p>Note: Not completing this in first iteration but will be needed later down the road for E-mail confirmation and sign ups. </p> Field Name Type Description <code>ID</code> <code>INTEGER</code> Unique identifier associated with code generation for 2FA <code>USER_ID</code> <code>INTEGER</code> User account one time pass code was generated for <code>OTP</code> <code>INTEGER</code> 6 digit one time pass code for 2 factor auth <code>EXPIRATION</code> <code>DATE</code> Date timestamp of when one time passcode is suppose to expire <code>ACTIVE</code> <code>BOOLEAN</code> Boolean to indicate if one time pass code entry is still valid for authentication. <code>CREATED_AT</code> <code>DATE</code> Date the 2 factor auth entry was created/registered <code>UPDATED_AT</code> <code>DATE</code> Date the 2 factor auth entry was updated"},{"location":"user-authentication-service/#registration-key-management","title":"Registration Key Management","text":"<ul> <li>For applications with authentication but not available for full public use, a registration key system will be used to issue unique invites. </li> <li>The user registration route will need to reference registration keys stored in the database to validate if a requester has permission to create an account.</li> <li>When a user successfully registers an account with the system, the registration key will be marked as inactive and then can no longer be used to register any more accounts.</li> </ul>"},{"location":"user-authentication-service/#registration-key-table","title":"Registration Key Table","text":"Field Name Type Description <code>ID</code> <code>INTEGER</code> Unique identifier associated with code generation for 2FA <code>REGISTRATION_KEY</code> <code>INTEGER</code> User account one time pass code was generated for <code>ACTIVE</code> <code>INTEGER</code> 6 digit one time pass code for 2 factor auth <code>CREATED_AT</code> <code>DATE</code> Date the registration key was created <code>UPDATED_AT</code> <code>DATE</code> Date any of the registration key fields were updated."}]}